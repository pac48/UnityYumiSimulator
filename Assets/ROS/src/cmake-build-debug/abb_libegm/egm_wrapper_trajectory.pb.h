// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: egm_wrapper_trajectory.proto

#ifndef PROTOBUF_egm_5fwrapper_5ftrajectory_2eproto__INCLUDED
#define PROTOBUF_egm_5fwrapper_5ftrajectory_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "egm_wrapper.pb.h"
// @@protoc_insertion_point(includes)

namespace abb {
namespace egm {
namespace wrapper {
namespace trajectory {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_egm_5fwrapper_5ftrajectory_2eproto();
void protobuf_AssignDesc_egm_5fwrapper_5ftrajectory_2eproto();
void protobuf_ShutdownFile_egm_5fwrapper_5ftrajectory_2eproto();

class JointGoal;
class CartesianGoal;
class RobotGoal;
class ExternalGoal;
class PointGoal;
class RobotPositionGoal;
class RobotVelocityGoal;
class TrajectoryGoal;
class StaticPositionGoal;
class StaticVelocityGoal;
class ExecutionProgress;

enum ExecutionProgress_State {
  ExecutionProgress_State_UNDEFINED = 0,
  ExecutionProgress_State_NORMAL = 1,
  ExecutionProgress_State_RAMP_DOWN = 2,
  ExecutionProgress_State_STATIC_GOAL = 3
};
bool ExecutionProgress_State_IsValid(int value);
const ExecutionProgress_State ExecutionProgress_State_State_MIN = ExecutionProgress_State_UNDEFINED;
const ExecutionProgress_State ExecutionProgress_State_State_MAX = ExecutionProgress_State_STATIC_GOAL;
const int ExecutionProgress_State_State_ARRAYSIZE = ExecutionProgress_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExecutionProgress_State_descriptor();
inline const ::std::string& ExecutionProgress_State_Name(ExecutionProgress_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExecutionProgress_State_descriptor(), value);
}
inline bool ExecutionProgress_State_Parse(
    const ::std::string& name, ExecutionProgress_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExecutionProgress_State>(
    ExecutionProgress_State_descriptor(), name, value);
}
enum ExecutionProgress_SubState {
  ExecutionProgress_SubState_NONE = 0,
  ExecutionProgress_SubState_RUNNING = 1,
  ExecutionProgress_SubState_FINISHED = 2
};
bool ExecutionProgress_SubState_IsValid(int value);
const ExecutionProgress_SubState ExecutionProgress_SubState_SubState_MIN = ExecutionProgress_SubState_NONE;
const ExecutionProgress_SubState ExecutionProgress_SubState_SubState_MAX = ExecutionProgress_SubState_FINISHED;
const int ExecutionProgress_SubState_SubState_ARRAYSIZE = ExecutionProgress_SubState_SubState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExecutionProgress_SubState_descriptor();
inline const ::std::string& ExecutionProgress_SubState_Name(ExecutionProgress_SubState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExecutionProgress_SubState_descriptor(), value);
}
inline bool ExecutionProgress_SubState_Parse(
    const ::std::string& name, ExecutionProgress_SubState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExecutionProgress_SubState>(
    ExecutionProgress_SubState_descriptor(), name, value);
}
// ===================================================================

class JointGoal : public ::google::protobuf::Message {
 public:
  JointGoal();
  virtual ~JointGoal();

  JointGoal(const JointGoal& from);

  inline JointGoal& operator=(const JointGoal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JointGoal& default_instance();

  void Swap(JointGoal* other);

  // implements Message ----------------------------------------------

  JointGoal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JointGoal& from);
  void MergeFrom(const JointGoal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .abb.egm.wrapper.Joints position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline const ::abb::egm::wrapper::Joints& position() const;
  inline ::abb::egm::wrapper::Joints* mutable_position();
  inline ::abb::egm::wrapper::Joints* release_position();
  inline void set_allocated_position(::abb::egm::wrapper::Joints* position);

  // optional .abb.egm.wrapper.Joints velocity = 2;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 2;
  inline const ::abb::egm::wrapper::Joints& velocity() const;
  inline ::abb::egm::wrapper::Joints* mutable_velocity();
  inline ::abb::egm::wrapper::Joints* release_velocity();
  inline void set_allocated_velocity(::abb::egm::wrapper::Joints* velocity);

  // optional .abb.egm.wrapper.Joints acceleration = 3;
  inline bool has_acceleration() const;
  inline void clear_acceleration();
  static const int kAccelerationFieldNumber = 3;
  inline const ::abb::egm::wrapper::Joints& acceleration() const;
  inline ::abb::egm::wrapper::Joints* mutable_acceleration();
  inline ::abb::egm::wrapper::Joints* release_acceleration();
  inline void set_allocated_acceleration(::abb::egm::wrapper::Joints* acceleration);

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.trajectory.JointGoal)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_acceleration();
  inline void clear_has_acceleration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::abb::egm::wrapper::Joints* position_;
  ::abb::egm::wrapper::Joints* velocity_;
  ::abb::egm::wrapper::Joints* acceleration_;
  friend void  protobuf_AddDesc_egm_5fwrapper_5ftrajectory_2eproto();
  friend void protobuf_AssignDesc_egm_5fwrapper_5ftrajectory_2eproto();
  friend void protobuf_ShutdownFile_egm_5fwrapper_5ftrajectory_2eproto();

  void InitAsDefaultInstance();
  static JointGoal* default_instance_;
};
// -------------------------------------------------------------------

class CartesianGoal : public ::google::protobuf::Message {
 public:
  CartesianGoal();
  virtual ~CartesianGoal();

  CartesianGoal(const CartesianGoal& from);

  inline CartesianGoal& operator=(const CartesianGoal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CartesianGoal& default_instance();

  void Swap(CartesianGoal* other);

  // implements Message ----------------------------------------------

  CartesianGoal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CartesianGoal& from);
  void MergeFrom(const CartesianGoal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .abb.egm.wrapper.CartesianPose pose = 1;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 1;
  inline const ::abb::egm::wrapper::CartesianPose& pose() const;
  inline ::abb::egm::wrapper::CartesianPose* mutable_pose();
  inline ::abb::egm::wrapper::CartesianPose* release_pose();
  inline void set_allocated_pose(::abb::egm::wrapper::CartesianPose* pose);

  // optional .abb.egm.wrapper.Cartesian velocity = 2;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 2;
  inline const ::abb::egm::wrapper::Cartesian& velocity() const;
  inline ::abb::egm::wrapper::Cartesian* mutable_velocity();
  inline ::abb::egm::wrapper::Cartesian* release_velocity();
  inline void set_allocated_velocity(::abb::egm::wrapper::Cartesian* velocity);

  // optional .abb.egm.wrapper.Cartesian acceleration = 3;
  inline bool has_acceleration() const;
  inline void clear_acceleration();
  static const int kAccelerationFieldNumber = 3;
  inline const ::abb::egm::wrapper::Cartesian& acceleration() const;
  inline ::abb::egm::wrapper::Cartesian* mutable_acceleration();
  inline ::abb::egm::wrapper::Cartesian* release_acceleration();
  inline void set_allocated_acceleration(::abb::egm::wrapper::Cartesian* acceleration);

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.trajectory.CartesianGoal)
 private:
  inline void set_has_pose();
  inline void clear_has_pose();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_acceleration();
  inline void clear_has_acceleration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::abb::egm::wrapper::CartesianPose* pose_;
  ::abb::egm::wrapper::Cartesian* velocity_;
  ::abb::egm::wrapper::Cartesian* acceleration_;
  friend void  protobuf_AddDesc_egm_5fwrapper_5ftrajectory_2eproto();
  friend void protobuf_AssignDesc_egm_5fwrapper_5ftrajectory_2eproto();
  friend void protobuf_ShutdownFile_egm_5fwrapper_5ftrajectory_2eproto();

  void InitAsDefaultInstance();
  static CartesianGoal* default_instance_;
};
// -------------------------------------------------------------------

class RobotGoal : public ::google::protobuf::Message {
 public:
  RobotGoal();
  virtual ~RobotGoal();

  RobotGoal(const RobotGoal& from);

  inline RobotGoal& operator=(const RobotGoal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotGoal& default_instance();

  void Swap(RobotGoal* other);

  // implements Message ----------------------------------------------

  RobotGoal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotGoal& from);
  void MergeFrom(const RobotGoal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
  inline bool has_joints() const;
  inline void clear_joints();
  static const int kJointsFieldNumber = 1;
  inline const ::abb::egm::wrapper::trajectory::JointGoal& joints() const;
  inline ::abb::egm::wrapper::trajectory::JointGoal* mutable_joints();
  inline ::abb::egm::wrapper::trajectory::JointGoal* release_joints();
  inline void set_allocated_joints(::abb::egm::wrapper::trajectory::JointGoal* joints);

  // optional .abb.egm.wrapper.trajectory.CartesianGoal cartesian = 2;
  inline bool has_cartesian() const;
  inline void clear_cartesian();
  static const int kCartesianFieldNumber = 2;
  inline const ::abb::egm::wrapper::trajectory::CartesianGoal& cartesian() const;
  inline ::abb::egm::wrapper::trajectory::CartesianGoal* mutable_cartesian();
  inline ::abb::egm::wrapper::trajectory::CartesianGoal* release_cartesian();
  inline void set_allocated_cartesian(::abb::egm::wrapper::trajectory::CartesianGoal* cartesian);

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.trajectory.RobotGoal)
 private:
  inline void set_has_joints();
  inline void clear_has_joints();
  inline void set_has_cartesian();
  inline void clear_has_cartesian();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::abb::egm::wrapper::trajectory::JointGoal* joints_;
  ::abb::egm::wrapper::trajectory::CartesianGoal* cartesian_;
  friend void  protobuf_AddDesc_egm_5fwrapper_5ftrajectory_2eproto();
  friend void protobuf_AssignDesc_egm_5fwrapper_5ftrajectory_2eproto();
  friend void protobuf_ShutdownFile_egm_5fwrapper_5ftrajectory_2eproto();

  void InitAsDefaultInstance();
  static RobotGoal* default_instance_;
};
// -------------------------------------------------------------------

class ExternalGoal : public ::google::protobuf::Message {
 public:
  ExternalGoal();
  virtual ~ExternalGoal();

  ExternalGoal(const ExternalGoal& from);

  inline ExternalGoal& operator=(const ExternalGoal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExternalGoal& default_instance();

  void Swap(ExternalGoal* other);

  // implements Message ----------------------------------------------

  ExternalGoal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExternalGoal& from);
  void MergeFrom(const ExternalGoal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
  inline bool has_joints() const;
  inline void clear_joints();
  static const int kJointsFieldNumber = 1;
  inline const ::abb::egm::wrapper::trajectory::JointGoal& joints() const;
  inline ::abb::egm::wrapper::trajectory::JointGoal* mutable_joints();
  inline ::abb::egm::wrapper::trajectory::JointGoal* release_joints();
  inline void set_allocated_joints(::abb::egm::wrapper::trajectory::JointGoal* joints);

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.trajectory.ExternalGoal)
 private:
  inline void set_has_joints();
  inline void clear_has_joints();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::abb::egm::wrapper::trajectory::JointGoal* joints_;
  friend void  protobuf_AddDesc_egm_5fwrapper_5ftrajectory_2eproto();
  friend void protobuf_AssignDesc_egm_5fwrapper_5ftrajectory_2eproto();
  friend void protobuf_ShutdownFile_egm_5fwrapper_5ftrajectory_2eproto();

  void InitAsDefaultInstance();
  static ExternalGoal* default_instance_;
};
// -------------------------------------------------------------------

class PointGoal : public ::google::protobuf::Message {
 public:
  PointGoal();
  virtual ~PointGoal();

  PointGoal(const PointGoal& from);

  inline PointGoal& operator=(const PointGoal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointGoal& default_instance();

  void Swap(PointGoal* other);

  // implements Message ----------------------------------------------

  PointGoal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointGoal& from);
  void MergeFrom(const PointGoal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double duration = 1;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 1;
  inline double duration() const;
  inline void set_duration(double value);

  // optional .abb.egm.wrapper.trajectory.RobotGoal robot = 2;
  inline bool has_robot() const;
  inline void clear_robot();
  static const int kRobotFieldNumber = 2;
  inline const ::abb::egm::wrapper::trajectory::RobotGoal& robot() const;
  inline ::abb::egm::wrapper::trajectory::RobotGoal* mutable_robot();
  inline ::abb::egm::wrapper::trajectory::RobotGoal* release_robot();
  inline void set_allocated_robot(::abb::egm::wrapper::trajectory::RobotGoal* robot);

  // optional .abb.egm.wrapper.trajectory.ExternalGoal external = 3;
  inline bool has_external() const;
  inline void clear_external();
  static const int kExternalFieldNumber = 3;
  inline const ::abb::egm::wrapper::trajectory::ExternalGoal& external() const;
  inline ::abb::egm::wrapper::trajectory::ExternalGoal* mutable_external();
  inline ::abb::egm::wrapper::trajectory::ExternalGoal* release_external();
  inline void set_allocated_external(::abb::egm::wrapper::trajectory::ExternalGoal* external);

  // optional bool reach = 4;
  inline bool has_reach() const;
  inline void clear_reach();
  static const int kReachFieldNumber = 4;
  inline bool reach() const;
  inline void set_reach(bool value);

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.trajectory.PointGoal)
 private:
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_robot();
  inline void clear_has_robot();
  inline void set_has_external();
  inline void clear_has_external();
  inline void set_has_reach();
  inline void clear_has_reach();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double duration_;
  ::abb::egm::wrapper::trajectory::RobotGoal* robot_;
  ::abb::egm::wrapper::trajectory::ExternalGoal* external_;
  bool reach_;
  friend void  protobuf_AddDesc_egm_5fwrapper_5ftrajectory_2eproto();
  friend void protobuf_AssignDesc_egm_5fwrapper_5ftrajectory_2eproto();
  friend void protobuf_ShutdownFile_egm_5fwrapper_5ftrajectory_2eproto();

  void InitAsDefaultInstance();
  static PointGoal* default_instance_;
};
// -------------------------------------------------------------------

class RobotPositionGoal : public ::google::protobuf::Message {
 public:
  RobotPositionGoal();
  virtual ~RobotPositionGoal();

  RobotPositionGoal(const RobotPositionGoal& from);

  inline RobotPositionGoal& operator=(const RobotPositionGoal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotPositionGoal& default_instance();

  void Swap(RobotPositionGoal* other);

  // implements Message ----------------------------------------------

  RobotPositionGoal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotPositionGoal& from);
  void MergeFrom(const RobotPositionGoal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .abb.egm.wrapper.Joints joints = 1;
  inline bool has_joints() const;
  inline void clear_joints();
  static const int kJointsFieldNumber = 1;
  inline const ::abb::egm::wrapper::Joints& joints() const;
  inline ::abb::egm::wrapper::Joints* mutable_joints();
  inline ::abb::egm::wrapper::Joints* release_joints();
  inline void set_allocated_joints(::abb::egm::wrapper::Joints* joints);

  // optional .abb.egm.wrapper.CartesianPose cartesian = 2;
  inline bool has_cartesian() const;
  inline void clear_cartesian();
  static const int kCartesianFieldNumber = 2;
  inline const ::abb::egm::wrapper::CartesianPose& cartesian() const;
  inline ::abb::egm::wrapper::CartesianPose* mutable_cartesian();
  inline ::abb::egm::wrapper::CartesianPose* release_cartesian();
  inline void set_allocated_cartesian(::abb::egm::wrapper::CartesianPose* cartesian);

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.trajectory.RobotPositionGoal)
 private:
  inline void set_has_joints();
  inline void clear_has_joints();
  inline void set_has_cartesian();
  inline void clear_has_cartesian();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::abb::egm::wrapper::Joints* joints_;
  ::abb::egm::wrapper::CartesianPose* cartesian_;
  friend void  protobuf_AddDesc_egm_5fwrapper_5ftrajectory_2eproto();
  friend void protobuf_AssignDesc_egm_5fwrapper_5ftrajectory_2eproto();
  friend void protobuf_ShutdownFile_egm_5fwrapper_5ftrajectory_2eproto();

  void InitAsDefaultInstance();
  static RobotPositionGoal* default_instance_;
};
// -------------------------------------------------------------------

class RobotVelocityGoal : public ::google::protobuf::Message {
 public:
  RobotVelocityGoal();
  virtual ~RobotVelocityGoal();

  RobotVelocityGoal(const RobotVelocityGoal& from);

  inline RobotVelocityGoal& operator=(const RobotVelocityGoal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotVelocityGoal& default_instance();

  void Swap(RobotVelocityGoal* other);

  // implements Message ----------------------------------------------

  RobotVelocityGoal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotVelocityGoal& from);
  void MergeFrom(const RobotVelocityGoal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .abb.egm.wrapper.Joints joints = 1;
  inline bool has_joints() const;
  inline void clear_joints();
  static const int kJointsFieldNumber = 1;
  inline const ::abb::egm::wrapper::Joints& joints() const;
  inline ::abb::egm::wrapper::Joints* mutable_joints();
  inline ::abb::egm::wrapper::Joints* release_joints();
  inline void set_allocated_joints(::abb::egm::wrapper::Joints* joints);

  // optional .abb.egm.wrapper.CartesianVelocity cartesian = 2;
  inline bool has_cartesian() const;
  inline void clear_cartesian();
  static const int kCartesianFieldNumber = 2;
  inline const ::abb::egm::wrapper::CartesianVelocity& cartesian() const;
  inline ::abb::egm::wrapper::CartesianVelocity* mutable_cartesian();
  inline ::abb::egm::wrapper::CartesianVelocity* release_cartesian();
  inline void set_allocated_cartesian(::abb::egm::wrapper::CartesianVelocity* cartesian);

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.trajectory.RobotVelocityGoal)
 private:
  inline void set_has_joints();
  inline void clear_has_joints();
  inline void set_has_cartesian();
  inline void clear_has_cartesian();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::abb::egm::wrapper::Joints* joints_;
  ::abb::egm::wrapper::CartesianVelocity* cartesian_;
  friend void  protobuf_AddDesc_egm_5fwrapper_5ftrajectory_2eproto();
  friend void protobuf_AssignDesc_egm_5fwrapper_5ftrajectory_2eproto();
  friend void protobuf_ShutdownFile_egm_5fwrapper_5ftrajectory_2eproto();

  void InitAsDefaultInstance();
  static RobotVelocityGoal* default_instance_;
};
// -------------------------------------------------------------------

class TrajectoryGoal : public ::google::protobuf::Message {
 public:
  TrajectoryGoal();
  virtual ~TrajectoryGoal();

  TrajectoryGoal(const TrajectoryGoal& from);

  inline TrajectoryGoal& operator=(const TrajectoryGoal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryGoal& default_instance();

  void Swap(TrajectoryGoal* other);

  // implements Message ----------------------------------------------

  TrajectoryGoal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrajectoryGoal& from);
  void MergeFrom(const TrajectoryGoal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .abb.egm.wrapper.trajectory.PointGoal points = 1;
  inline int points_size() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 1;
  inline const ::abb::egm::wrapper::trajectory::PointGoal& points(int index) const;
  inline ::abb::egm::wrapper::trajectory::PointGoal* mutable_points(int index);
  inline ::abb::egm::wrapper::trajectory::PointGoal* add_points();
  inline const ::google::protobuf::RepeatedPtrField< ::abb::egm::wrapper::trajectory::PointGoal >&
      points() const;
  inline ::google::protobuf::RepeatedPtrField< ::abb::egm::wrapper::trajectory::PointGoal >*
      mutable_points();

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.trajectory.TrajectoryGoal)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::abb::egm::wrapper::trajectory::PointGoal > points_;
  friend void  protobuf_AddDesc_egm_5fwrapper_5ftrajectory_2eproto();
  friend void protobuf_AssignDesc_egm_5fwrapper_5ftrajectory_2eproto();
  friend void protobuf_ShutdownFile_egm_5fwrapper_5ftrajectory_2eproto();

  void InitAsDefaultInstance();
  static TrajectoryGoal* default_instance_;
};
// -------------------------------------------------------------------

class StaticPositionGoal : public ::google::protobuf::Message {
 public:
  StaticPositionGoal();
  virtual ~StaticPositionGoal();

  StaticPositionGoal(const StaticPositionGoal& from);

  inline StaticPositionGoal& operator=(const StaticPositionGoal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StaticPositionGoal& default_instance();

  void Swap(StaticPositionGoal* other);

  // implements Message ----------------------------------------------

  StaticPositionGoal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StaticPositionGoal& from);
  void MergeFrom(const StaticPositionGoal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .abb.egm.wrapper.trajectory.RobotPositionGoal robot = 1;
  inline bool has_robot() const;
  inline void clear_robot();
  static const int kRobotFieldNumber = 1;
  inline const ::abb::egm::wrapper::trajectory::RobotPositionGoal& robot() const;
  inline ::abb::egm::wrapper::trajectory::RobotPositionGoal* mutable_robot();
  inline ::abb::egm::wrapper::trajectory::RobotPositionGoal* release_robot();
  inline void set_allocated_robot(::abb::egm::wrapper::trajectory::RobotPositionGoal* robot);

  // optional .abb.egm.wrapper.Joints external = 2;
  inline bool has_external() const;
  inline void clear_external();
  static const int kExternalFieldNumber = 2;
  inline const ::abb::egm::wrapper::Joints& external() const;
  inline ::abb::egm::wrapper::Joints* mutable_external();
  inline ::abb::egm::wrapper::Joints* release_external();
  inline void set_allocated_external(::abb::egm::wrapper::Joints* external);

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.trajectory.StaticPositionGoal)
 private:
  inline void set_has_robot();
  inline void clear_has_robot();
  inline void set_has_external();
  inline void clear_has_external();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::abb::egm::wrapper::trajectory::RobotPositionGoal* robot_;
  ::abb::egm::wrapper::Joints* external_;
  friend void  protobuf_AddDesc_egm_5fwrapper_5ftrajectory_2eproto();
  friend void protobuf_AssignDesc_egm_5fwrapper_5ftrajectory_2eproto();
  friend void protobuf_ShutdownFile_egm_5fwrapper_5ftrajectory_2eproto();

  void InitAsDefaultInstance();
  static StaticPositionGoal* default_instance_;
};
// -------------------------------------------------------------------

class StaticVelocityGoal : public ::google::protobuf::Message {
 public:
  StaticVelocityGoal();
  virtual ~StaticVelocityGoal();

  StaticVelocityGoal(const StaticVelocityGoal& from);

  inline StaticVelocityGoal& operator=(const StaticVelocityGoal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StaticVelocityGoal& default_instance();

  void Swap(StaticVelocityGoal* other);

  // implements Message ----------------------------------------------

  StaticVelocityGoal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StaticVelocityGoal& from);
  void MergeFrom(const StaticVelocityGoal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .abb.egm.wrapper.trajectory.RobotVelocityGoal robot = 1;
  inline bool has_robot() const;
  inline void clear_robot();
  static const int kRobotFieldNumber = 1;
  inline const ::abb::egm::wrapper::trajectory::RobotVelocityGoal& robot() const;
  inline ::abb::egm::wrapper::trajectory::RobotVelocityGoal* mutable_robot();
  inline ::abb::egm::wrapper::trajectory::RobotVelocityGoal* release_robot();
  inline void set_allocated_robot(::abb::egm::wrapper::trajectory::RobotVelocityGoal* robot);

  // optional .abb.egm.wrapper.Joints external = 2;
  inline bool has_external() const;
  inline void clear_external();
  static const int kExternalFieldNumber = 2;
  inline const ::abb::egm::wrapper::Joints& external() const;
  inline ::abb::egm::wrapper::Joints* mutable_external();
  inline ::abb::egm::wrapper::Joints* release_external();
  inline void set_allocated_external(::abb::egm::wrapper::Joints* external);

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.trajectory.StaticVelocityGoal)
 private:
  inline void set_has_robot();
  inline void clear_has_robot();
  inline void set_has_external();
  inline void clear_has_external();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::abb::egm::wrapper::trajectory::RobotVelocityGoal* robot_;
  ::abb::egm::wrapper::Joints* external_;
  friend void  protobuf_AddDesc_egm_5fwrapper_5ftrajectory_2eproto();
  friend void protobuf_AssignDesc_egm_5fwrapper_5ftrajectory_2eproto();
  friend void protobuf_ShutdownFile_egm_5fwrapper_5ftrajectory_2eproto();

  void InitAsDefaultInstance();
  static StaticVelocityGoal* default_instance_;
};
// -------------------------------------------------------------------

class ExecutionProgress : public ::google::protobuf::Message {
 public:
  ExecutionProgress();
  virtual ~ExecutionProgress();

  ExecutionProgress(const ExecutionProgress& from);

  inline ExecutionProgress& operator=(const ExecutionProgress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionProgress& default_instance();

  void Swap(ExecutionProgress* other);

  // implements Message ----------------------------------------------

  ExecutionProgress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecutionProgress& from);
  void MergeFrom(const ExecutionProgress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ExecutionProgress_State State;
  static const State UNDEFINED = ExecutionProgress_State_UNDEFINED;
  static const State NORMAL = ExecutionProgress_State_NORMAL;
  static const State RAMP_DOWN = ExecutionProgress_State_RAMP_DOWN;
  static const State STATIC_GOAL = ExecutionProgress_State_STATIC_GOAL;
  static inline bool State_IsValid(int value) {
    return ExecutionProgress_State_IsValid(value);
  }
  static const State State_MIN =
    ExecutionProgress_State_State_MIN;
  static const State State_MAX =
    ExecutionProgress_State_State_MAX;
  static const int State_ARRAYSIZE =
    ExecutionProgress_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return ExecutionProgress_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return ExecutionProgress_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return ExecutionProgress_State_Parse(name, value);
  }

  typedef ExecutionProgress_SubState SubState;
  static const SubState NONE = ExecutionProgress_SubState_NONE;
  static const SubState RUNNING = ExecutionProgress_SubState_RUNNING;
  static const SubState FINISHED = ExecutionProgress_SubState_FINISHED;
  static inline bool SubState_IsValid(int value) {
    return ExecutionProgress_SubState_IsValid(value);
  }
  static const SubState SubState_MIN =
    ExecutionProgress_SubState_SubState_MIN;
  static const SubState SubState_MAX =
    ExecutionProgress_SubState_SubState_MAX;
  static const int SubState_ARRAYSIZE =
    ExecutionProgress_SubState_SubState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SubState_descriptor() {
    return ExecutionProgress_SubState_descriptor();
  }
  static inline const ::std::string& SubState_Name(SubState value) {
    return ExecutionProgress_SubState_Name(value);
  }
  static inline bool SubState_Parse(const ::std::string& name,
      SubState* value) {
    return ExecutionProgress_SubState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .abb.egm.wrapper.trajectory.ExecutionProgress.State state = 1 [default = UNDEFINED];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::abb::egm::wrapper::trajectory::ExecutionProgress_State state() const;
  inline void set_state(::abb::egm::wrapper::trajectory::ExecutionProgress_State value);

  // optional .abb.egm.wrapper.trajectory.ExecutionProgress.SubState sub_state = 2 [default = NONE];
  inline bool has_sub_state() const;
  inline void clear_sub_state();
  static const int kSubStateFieldNumber = 2;
  inline ::abb::egm::wrapper::trajectory::ExecutionProgress_SubState sub_state() const;
  inline void set_sub_state(::abb::egm::wrapper::trajectory::ExecutionProgress_SubState value);

  // optional .abb.egm.wrapper.Input inputs = 3;
  inline bool has_inputs() const;
  inline void clear_inputs();
  static const int kInputsFieldNumber = 3;
  inline const ::abb::egm::wrapper::Input& inputs() const;
  inline ::abb::egm::wrapper::Input* mutable_inputs();
  inline ::abb::egm::wrapper::Input* release_inputs();
  inline void set_allocated_inputs(::abb::egm::wrapper::Input* inputs);

  // optional .abb.egm.wrapper.Output outputs = 4;
  inline bool has_outputs() const;
  inline void clear_outputs();
  static const int kOutputsFieldNumber = 4;
  inline const ::abb::egm::wrapper::Output& outputs() const;
  inline ::abb::egm::wrapper::Output* mutable_outputs();
  inline ::abb::egm::wrapper::Output* release_outputs();
  inline void set_allocated_outputs(::abb::egm::wrapper::Output* outputs);

  // optional double time_passed = 5;
  inline bool has_time_passed() const;
  inline void clear_time_passed();
  static const int kTimePassedFieldNumber = 5;
  inline double time_passed() const;
  inline void set_time_passed(double value);

  // optional bool goal_active = 6;
  inline bool has_goal_active() const;
  inline void clear_goal_active();
  static const int kGoalActiveFieldNumber = 6;
  inline bool goal_active() const;
  inline void set_goal_active(bool value);

  // optional .abb.egm.wrapper.trajectory.PointGoal goal = 7;
  inline bool has_goal() const;
  inline void clear_goal();
  static const int kGoalFieldNumber = 7;
  inline const ::abb::egm::wrapper::trajectory::PointGoal& goal() const;
  inline ::abb::egm::wrapper::trajectory::PointGoal* mutable_goal();
  inline ::abb::egm::wrapper::trajectory::PointGoal* release_goal();
  inline void set_allocated_goal(::abb::egm::wrapper::trajectory::PointGoal* goal);

  // optional .abb.egm.wrapper.trajectory.TrajectoryGoal active_trajectory = 8;
  inline bool has_active_trajectory() const;
  inline void clear_active_trajectory();
  static const int kActiveTrajectoryFieldNumber = 8;
  inline const ::abb::egm::wrapper::trajectory::TrajectoryGoal& active_trajectory() const;
  inline ::abb::egm::wrapper::trajectory::TrajectoryGoal* mutable_active_trajectory();
  inline ::abb::egm::wrapper::trajectory::TrajectoryGoal* release_active_trajectory();
  inline void set_allocated_active_trajectory(::abb::egm::wrapper::trajectory::TrajectoryGoal* active_trajectory);

  // optional uint32 pending_trajectories = 9;
  inline bool has_pending_trajectories() const;
  inline void clear_pending_trajectories();
  static const int kPendingTrajectoriesFieldNumber = 9;
  inline ::google::protobuf::uint32 pending_trajectories() const;
  inline void set_pending_trajectories(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:abb.egm.wrapper.trajectory.ExecutionProgress)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_sub_state();
  inline void clear_has_sub_state();
  inline void set_has_inputs();
  inline void clear_has_inputs();
  inline void set_has_outputs();
  inline void clear_has_outputs();
  inline void set_has_time_passed();
  inline void clear_has_time_passed();
  inline void set_has_goal_active();
  inline void clear_has_goal_active();
  inline void set_has_goal();
  inline void clear_has_goal();
  inline void set_has_active_trajectory();
  inline void clear_has_active_trajectory();
  inline void set_has_pending_trajectories();
  inline void clear_has_pending_trajectories();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int state_;
  int sub_state_;
  ::abb::egm::wrapper::Input* inputs_;
  ::abb::egm::wrapper::Output* outputs_;
  double time_passed_;
  ::abb::egm::wrapper::trajectory::PointGoal* goal_;
  bool goal_active_;
  ::google::protobuf::uint32 pending_trajectories_;
  ::abb::egm::wrapper::trajectory::TrajectoryGoal* active_trajectory_;
  friend void  protobuf_AddDesc_egm_5fwrapper_5ftrajectory_2eproto();
  friend void protobuf_AssignDesc_egm_5fwrapper_5ftrajectory_2eproto();
  friend void protobuf_ShutdownFile_egm_5fwrapper_5ftrajectory_2eproto();

  void InitAsDefaultInstance();
  static ExecutionProgress* default_instance_;
};
// ===================================================================


// ===================================================================

// JointGoal

// optional .abb.egm.wrapper.Joints position = 1;
inline bool JointGoal::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JointGoal::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JointGoal::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JointGoal::clear_position() {
  if (position_ != NULL) position_->::abb::egm::wrapper::Joints::Clear();
  clear_has_position();
}
inline const ::abb::egm::wrapper::Joints& JointGoal::position() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.JointGoal.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::abb::egm::wrapper::Joints* JointGoal::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::abb::egm::wrapper::Joints;
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.JointGoal.position)
  return position_;
}
inline ::abb::egm::wrapper::Joints* JointGoal::release_position() {
  clear_has_position();
  ::abb::egm::wrapper::Joints* temp = position_;
  position_ = NULL;
  return temp;
}
inline void JointGoal::set_allocated_position(::abb::egm::wrapper::Joints* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.JointGoal.position)
}

// optional .abb.egm.wrapper.Joints velocity = 2;
inline bool JointGoal::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JointGoal::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JointGoal::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JointGoal::clear_velocity() {
  if (velocity_ != NULL) velocity_->::abb::egm::wrapper::Joints::Clear();
  clear_has_velocity();
}
inline const ::abb::egm::wrapper::Joints& JointGoal::velocity() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.JointGoal.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::abb::egm::wrapper::Joints* JointGoal::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) velocity_ = new ::abb::egm::wrapper::Joints;
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.JointGoal.velocity)
  return velocity_;
}
inline ::abb::egm::wrapper::Joints* JointGoal::release_velocity() {
  clear_has_velocity();
  ::abb::egm::wrapper::Joints* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void JointGoal::set_allocated_velocity(::abb::egm::wrapper::Joints* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.JointGoal.velocity)
}

// optional .abb.egm.wrapper.Joints acceleration = 3;
inline bool JointGoal::has_acceleration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JointGoal::set_has_acceleration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JointGoal::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JointGoal::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->::abb::egm::wrapper::Joints::Clear();
  clear_has_acceleration();
}
inline const ::abb::egm::wrapper::Joints& JointGoal::acceleration() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.JointGoal.acceleration)
  return acceleration_ != NULL ? *acceleration_ : *default_instance_->acceleration_;
}
inline ::abb::egm::wrapper::Joints* JointGoal::mutable_acceleration() {
  set_has_acceleration();
  if (acceleration_ == NULL) acceleration_ = new ::abb::egm::wrapper::Joints;
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.JointGoal.acceleration)
  return acceleration_;
}
inline ::abb::egm::wrapper::Joints* JointGoal::release_acceleration() {
  clear_has_acceleration();
  ::abb::egm::wrapper::Joints* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
inline void JointGoal::set_allocated_acceleration(::abb::egm::wrapper::Joints* acceleration) {
  delete acceleration_;
  acceleration_ = acceleration;
  if (acceleration) {
    set_has_acceleration();
  } else {
    clear_has_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.JointGoal.acceleration)
}

// -------------------------------------------------------------------

// CartesianGoal

// optional .abb.egm.wrapper.CartesianPose pose = 1;
inline bool CartesianGoal::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CartesianGoal::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CartesianGoal::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CartesianGoal::clear_pose() {
  if (pose_ != NULL) pose_->::abb::egm::wrapper::CartesianPose::Clear();
  clear_has_pose();
}
inline const ::abb::egm::wrapper::CartesianPose& CartesianGoal::pose() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.CartesianGoal.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::abb::egm::wrapper::CartesianPose* CartesianGoal::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::abb::egm::wrapper::CartesianPose;
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.CartesianGoal.pose)
  return pose_;
}
inline ::abb::egm::wrapper::CartesianPose* CartesianGoal::release_pose() {
  clear_has_pose();
  ::abb::egm::wrapper::CartesianPose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void CartesianGoal::set_allocated_pose(::abb::egm::wrapper::CartesianPose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.CartesianGoal.pose)
}

// optional .abb.egm.wrapper.Cartesian velocity = 2;
inline bool CartesianGoal::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CartesianGoal::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CartesianGoal::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CartesianGoal::clear_velocity() {
  if (velocity_ != NULL) velocity_->::abb::egm::wrapper::Cartesian::Clear();
  clear_has_velocity();
}
inline const ::abb::egm::wrapper::Cartesian& CartesianGoal::velocity() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.CartesianGoal.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::abb::egm::wrapper::Cartesian* CartesianGoal::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) velocity_ = new ::abb::egm::wrapper::Cartesian;
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.CartesianGoal.velocity)
  return velocity_;
}
inline ::abb::egm::wrapper::Cartesian* CartesianGoal::release_velocity() {
  clear_has_velocity();
  ::abb::egm::wrapper::Cartesian* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void CartesianGoal::set_allocated_velocity(::abb::egm::wrapper::Cartesian* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.CartesianGoal.velocity)
}

// optional .abb.egm.wrapper.Cartesian acceleration = 3;
inline bool CartesianGoal::has_acceleration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CartesianGoal::set_has_acceleration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CartesianGoal::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CartesianGoal::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->::abb::egm::wrapper::Cartesian::Clear();
  clear_has_acceleration();
}
inline const ::abb::egm::wrapper::Cartesian& CartesianGoal::acceleration() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.CartesianGoal.acceleration)
  return acceleration_ != NULL ? *acceleration_ : *default_instance_->acceleration_;
}
inline ::abb::egm::wrapper::Cartesian* CartesianGoal::mutable_acceleration() {
  set_has_acceleration();
  if (acceleration_ == NULL) acceleration_ = new ::abb::egm::wrapper::Cartesian;
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.CartesianGoal.acceleration)
  return acceleration_;
}
inline ::abb::egm::wrapper::Cartesian* CartesianGoal::release_acceleration() {
  clear_has_acceleration();
  ::abb::egm::wrapper::Cartesian* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
inline void CartesianGoal::set_allocated_acceleration(::abb::egm::wrapper::Cartesian* acceleration) {
  delete acceleration_;
  acceleration_ = acceleration;
  if (acceleration) {
    set_has_acceleration();
  } else {
    clear_has_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.CartesianGoal.acceleration)
}

// -------------------------------------------------------------------

// RobotGoal

// optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
inline bool RobotGoal::has_joints() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotGoal::set_has_joints() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotGoal::clear_has_joints() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotGoal::clear_joints() {
  if (joints_ != NULL) joints_->::abb::egm::wrapper::trajectory::JointGoal::Clear();
  clear_has_joints();
}
inline const ::abb::egm::wrapper::trajectory::JointGoal& RobotGoal::joints() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.RobotGoal.joints)
  return joints_ != NULL ? *joints_ : *default_instance_->joints_;
}
inline ::abb::egm::wrapper::trajectory::JointGoal* RobotGoal::mutable_joints() {
  set_has_joints();
  if (joints_ == NULL) joints_ = new ::abb::egm::wrapper::trajectory::JointGoal;
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.RobotGoal.joints)
  return joints_;
}
inline ::abb::egm::wrapper::trajectory::JointGoal* RobotGoal::release_joints() {
  clear_has_joints();
  ::abb::egm::wrapper::trajectory::JointGoal* temp = joints_;
  joints_ = NULL;
  return temp;
}
inline void RobotGoal::set_allocated_joints(::abb::egm::wrapper::trajectory::JointGoal* joints) {
  delete joints_;
  joints_ = joints;
  if (joints) {
    set_has_joints();
  } else {
    clear_has_joints();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.RobotGoal.joints)
}

// optional .abb.egm.wrapper.trajectory.CartesianGoal cartesian = 2;
inline bool RobotGoal::has_cartesian() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotGoal::set_has_cartesian() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotGoal::clear_has_cartesian() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotGoal::clear_cartesian() {
  if (cartesian_ != NULL) cartesian_->::abb::egm::wrapper::trajectory::CartesianGoal::Clear();
  clear_has_cartesian();
}
inline const ::abb::egm::wrapper::trajectory::CartesianGoal& RobotGoal::cartesian() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.RobotGoal.cartesian)
  return cartesian_ != NULL ? *cartesian_ : *default_instance_->cartesian_;
}
inline ::abb::egm::wrapper::trajectory::CartesianGoal* RobotGoal::mutable_cartesian() {
  set_has_cartesian();
  if (cartesian_ == NULL) cartesian_ = new ::abb::egm::wrapper::trajectory::CartesianGoal;
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.RobotGoal.cartesian)
  return cartesian_;
}
inline ::abb::egm::wrapper::trajectory::CartesianGoal* RobotGoal::release_cartesian() {
  clear_has_cartesian();
  ::abb::egm::wrapper::trajectory::CartesianGoal* temp = cartesian_;
  cartesian_ = NULL;
  return temp;
}
inline void RobotGoal::set_allocated_cartesian(::abb::egm::wrapper::trajectory::CartesianGoal* cartesian) {
  delete cartesian_;
  cartesian_ = cartesian;
  if (cartesian) {
    set_has_cartesian();
  } else {
    clear_has_cartesian();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.RobotGoal.cartesian)
}

// -------------------------------------------------------------------

// ExternalGoal

// optional .abb.egm.wrapper.trajectory.JointGoal joints = 1;
inline bool ExternalGoal::has_joints() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExternalGoal::set_has_joints() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExternalGoal::clear_has_joints() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExternalGoal::clear_joints() {
  if (joints_ != NULL) joints_->::abb::egm::wrapper::trajectory::JointGoal::Clear();
  clear_has_joints();
}
inline const ::abb::egm::wrapper::trajectory::JointGoal& ExternalGoal::joints() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.ExternalGoal.joints)
  return joints_ != NULL ? *joints_ : *default_instance_->joints_;
}
inline ::abb::egm::wrapper::trajectory::JointGoal* ExternalGoal::mutable_joints() {
  set_has_joints();
  if (joints_ == NULL) joints_ = new ::abb::egm::wrapper::trajectory::JointGoal;
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.ExternalGoal.joints)
  return joints_;
}
inline ::abb::egm::wrapper::trajectory::JointGoal* ExternalGoal::release_joints() {
  clear_has_joints();
  ::abb::egm::wrapper::trajectory::JointGoal* temp = joints_;
  joints_ = NULL;
  return temp;
}
inline void ExternalGoal::set_allocated_joints(::abb::egm::wrapper::trajectory::JointGoal* joints) {
  delete joints_;
  joints_ = joints;
  if (joints) {
    set_has_joints();
  } else {
    clear_has_joints();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.ExternalGoal.joints)
}

// -------------------------------------------------------------------

// PointGoal

// optional double duration = 1;
inline bool PointGoal::has_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PointGoal::set_has_duration() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PointGoal::clear_has_duration() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PointGoal::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline double PointGoal::duration() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.PointGoal.duration)
  return duration_;
}
inline void PointGoal::set_duration(double value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.trajectory.PointGoal.duration)
}

// optional .abb.egm.wrapper.trajectory.RobotGoal robot = 2;
inline bool PointGoal::has_robot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PointGoal::set_has_robot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PointGoal::clear_has_robot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PointGoal::clear_robot() {
  if (robot_ != NULL) robot_->::abb::egm::wrapper::trajectory::RobotGoal::Clear();
  clear_has_robot();
}
inline const ::abb::egm::wrapper::trajectory::RobotGoal& PointGoal::robot() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.PointGoal.robot)
  return robot_ != NULL ? *robot_ : *default_instance_->robot_;
}
inline ::abb::egm::wrapper::trajectory::RobotGoal* PointGoal::mutable_robot() {
  set_has_robot();
  if (robot_ == NULL) robot_ = new ::abb::egm::wrapper::trajectory::RobotGoal;
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.PointGoal.robot)
  return robot_;
}
inline ::abb::egm::wrapper::trajectory::RobotGoal* PointGoal::release_robot() {
  clear_has_robot();
  ::abb::egm::wrapper::trajectory::RobotGoal* temp = robot_;
  robot_ = NULL;
  return temp;
}
inline void PointGoal::set_allocated_robot(::abb::egm::wrapper::trajectory::RobotGoal* robot) {
  delete robot_;
  robot_ = robot;
  if (robot) {
    set_has_robot();
  } else {
    clear_has_robot();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.PointGoal.robot)
}

// optional .abb.egm.wrapper.trajectory.ExternalGoal external = 3;
inline bool PointGoal::has_external() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PointGoal::set_has_external() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PointGoal::clear_has_external() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PointGoal::clear_external() {
  if (external_ != NULL) external_->::abb::egm::wrapper::trajectory::ExternalGoal::Clear();
  clear_has_external();
}
inline const ::abb::egm::wrapper::trajectory::ExternalGoal& PointGoal::external() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.PointGoal.external)
  return external_ != NULL ? *external_ : *default_instance_->external_;
}
inline ::abb::egm::wrapper::trajectory::ExternalGoal* PointGoal::mutable_external() {
  set_has_external();
  if (external_ == NULL) external_ = new ::abb::egm::wrapper::trajectory::ExternalGoal;
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.PointGoal.external)
  return external_;
}
inline ::abb::egm::wrapper::trajectory::ExternalGoal* PointGoal::release_external() {
  clear_has_external();
  ::abb::egm::wrapper::trajectory::ExternalGoal* temp = external_;
  external_ = NULL;
  return temp;
}
inline void PointGoal::set_allocated_external(::abb::egm::wrapper::trajectory::ExternalGoal* external) {
  delete external_;
  external_ = external;
  if (external) {
    set_has_external();
  } else {
    clear_has_external();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.PointGoal.external)
}

// optional bool reach = 4;
inline bool PointGoal::has_reach() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PointGoal::set_has_reach() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PointGoal::clear_has_reach() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PointGoal::clear_reach() {
  reach_ = false;
  clear_has_reach();
}
inline bool PointGoal::reach() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.PointGoal.reach)
  return reach_;
}
inline void PointGoal::set_reach(bool value) {
  set_has_reach();
  reach_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.trajectory.PointGoal.reach)
}

// -------------------------------------------------------------------

// RobotPositionGoal

// optional .abb.egm.wrapper.Joints joints = 1;
inline bool RobotPositionGoal::has_joints() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotPositionGoal::set_has_joints() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotPositionGoal::clear_has_joints() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotPositionGoal::clear_joints() {
  if (joints_ != NULL) joints_->::abb::egm::wrapper::Joints::Clear();
  clear_has_joints();
}
inline const ::abb::egm::wrapper::Joints& RobotPositionGoal::joints() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.RobotPositionGoal.joints)
  return joints_ != NULL ? *joints_ : *default_instance_->joints_;
}
inline ::abb::egm::wrapper::Joints* RobotPositionGoal::mutable_joints() {
  set_has_joints();
  if (joints_ == NULL) joints_ = new ::abb::egm::wrapper::Joints;
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.RobotPositionGoal.joints)
  return joints_;
}
inline ::abb::egm::wrapper::Joints* RobotPositionGoal::release_joints() {
  clear_has_joints();
  ::abb::egm::wrapper::Joints* temp = joints_;
  joints_ = NULL;
  return temp;
}
inline void RobotPositionGoal::set_allocated_joints(::abb::egm::wrapper::Joints* joints) {
  delete joints_;
  joints_ = joints;
  if (joints) {
    set_has_joints();
  } else {
    clear_has_joints();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.RobotPositionGoal.joints)
}

// optional .abb.egm.wrapper.CartesianPose cartesian = 2;
inline bool RobotPositionGoal::has_cartesian() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotPositionGoal::set_has_cartesian() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotPositionGoal::clear_has_cartesian() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotPositionGoal::clear_cartesian() {
  if (cartesian_ != NULL) cartesian_->::abb::egm::wrapper::CartesianPose::Clear();
  clear_has_cartesian();
}
inline const ::abb::egm::wrapper::CartesianPose& RobotPositionGoal::cartesian() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.RobotPositionGoal.cartesian)
  return cartesian_ != NULL ? *cartesian_ : *default_instance_->cartesian_;
}
inline ::abb::egm::wrapper::CartesianPose* RobotPositionGoal::mutable_cartesian() {
  set_has_cartesian();
  if (cartesian_ == NULL) cartesian_ = new ::abb::egm::wrapper::CartesianPose;
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.RobotPositionGoal.cartesian)
  return cartesian_;
}
inline ::abb::egm::wrapper::CartesianPose* RobotPositionGoal::release_cartesian() {
  clear_has_cartesian();
  ::abb::egm::wrapper::CartesianPose* temp = cartesian_;
  cartesian_ = NULL;
  return temp;
}
inline void RobotPositionGoal::set_allocated_cartesian(::abb::egm::wrapper::CartesianPose* cartesian) {
  delete cartesian_;
  cartesian_ = cartesian;
  if (cartesian) {
    set_has_cartesian();
  } else {
    clear_has_cartesian();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.RobotPositionGoal.cartesian)
}

// -------------------------------------------------------------------

// RobotVelocityGoal

// optional .abb.egm.wrapper.Joints joints = 1;
inline bool RobotVelocityGoal::has_joints() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotVelocityGoal::set_has_joints() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotVelocityGoal::clear_has_joints() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotVelocityGoal::clear_joints() {
  if (joints_ != NULL) joints_->::abb::egm::wrapper::Joints::Clear();
  clear_has_joints();
}
inline const ::abb::egm::wrapper::Joints& RobotVelocityGoal::joints() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.RobotVelocityGoal.joints)
  return joints_ != NULL ? *joints_ : *default_instance_->joints_;
}
inline ::abb::egm::wrapper::Joints* RobotVelocityGoal::mutable_joints() {
  set_has_joints();
  if (joints_ == NULL) joints_ = new ::abb::egm::wrapper::Joints;
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.RobotVelocityGoal.joints)
  return joints_;
}
inline ::abb::egm::wrapper::Joints* RobotVelocityGoal::release_joints() {
  clear_has_joints();
  ::abb::egm::wrapper::Joints* temp = joints_;
  joints_ = NULL;
  return temp;
}
inline void RobotVelocityGoal::set_allocated_joints(::abb::egm::wrapper::Joints* joints) {
  delete joints_;
  joints_ = joints;
  if (joints) {
    set_has_joints();
  } else {
    clear_has_joints();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.RobotVelocityGoal.joints)
}

// optional .abb.egm.wrapper.CartesianVelocity cartesian = 2;
inline bool RobotVelocityGoal::has_cartesian() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotVelocityGoal::set_has_cartesian() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotVelocityGoal::clear_has_cartesian() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotVelocityGoal::clear_cartesian() {
  if (cartesian_ != NULL) cartesian_->::abb::egm::wrapper::CartesianVelocity::Clear();
  clear_has_cartesian();
}
inline const ::abb::egm::wrapper::CartesianVelocity& RobotVelocityGoal::cartesian() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.RobotVelocityGoal.cartesian)
  return cartesian_ != NULL ? *cartesian_ : *default_instance_->cartesian_;
}
inline ::abb::egm::wrapper::CartesianVelocity* RobotVelocityGoal::mutable_cartesian() {
  set_has_cartesian();
  if (cartesian_ == NULL) cartesian_ = new ::abb::egm::wrapper::CartesianVelocity;
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.RobotVelocityGoal.cartesian)
  return cartesian_;
}
inline ::abb::egm::wrapper::CartesianVelocity* RobotVelocityGoal::release_cartesian() {
  clear_has_cartesian();
  ::abb::egm::wrapper::CartesianVelocity* temp = cartesian_;
  cartesian_ = NULL;
  return temp;
}
inline void RobotVelocityGoal::set_allocated_cartesian(::abb::egm::wrapper::CartesianVelocity* cartesian) {
  delete cartesian_;
  cartesian_ = cartesian;
  if (cartesian) {
    set_has_cartesian();
  } else {
    clear_has_cartesian();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.RobotVelocityGoal.cartesian)
}

// -------------------------------------------------------------------

// TrajectoryGoal

// repeated .abb.egm.wrapper.trajectory.PointGoal points = 1;
inline int TrajectoryGoal::points_size() const {
  return points_.size();
}
inline void TrajectoryGoal::clear_points() {
  points_.Clear();
}
inline const ::abb::egm::wrapper::trajectory::PointGoal& TrajectoryGoal::points(int index) const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.TrajectoryGoal.points)
  return points_.Get(index);
}
inline ::abb::egm::wrapper::trajectory::PointGoal* TrajectoryGoal::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.TrajectoryGoal.points)
  return points_.Mutable(index);
}
inline ::abb::egm::wrapper::trajectory::PointGoal* TrajectoryGoal::add_points() {
  // @@protoc_insertion_point(field_add:abb.egm.wrapper.trajectory.TrajectoryGoal.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::abb::egm::wrapper::trajectory::PointGoal >&
TrajectoryGoal::points() const {
  // @@protoc_insertion_point(field_list:abb.egm.wrapper.trajectory.TrajectoryGoal.points)
  return points_;
}
inline ::google::protobuf::RepeatedPtrField< ::abb::egm::wrapper::trajectory::PointGoal >*
TrajectoryGoal::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:abb.egm.wrapper.trajectory.TrajectoryGoal.points)
  return &points_;
}

// -------------------------------------------------------------------

// StaticPositionGoal

// optional .abb.egm.wrapper.trajectory.RobotPositionGoal robot = 1;
inline bool StaticPositionGoal::has_robot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StaticPositionGoal::set_has_robot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StaticPositionGoal::clear_has_robot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StaticPositionGoal::clear_robot() {
  if (robot_ != NULL) robot_->::abb::egm::wrapper::trajectory::RobotPositionGoal::Clear();
  clear_has_robot();
}
inline const ::abb::egm::wrapper::trajectory::RobotPositionGoal& StaticPositionGoal::robot() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.StaticPositionGoal.robot)
  return robot_ != NULL ? *robot_ : *default_instance_->robot_;
}
inline ::abb::egm::wrapper::trajectory::RobotPositionGoal* StaticPositionGoal::mutable_robot() {
  set_has_robot();
  if (robot_ == NULL) robot_ = new ::abb::egm::wrapper::trajectory::RobotPositionGoal;
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.StaticPositionGoal.robot)
  return robot_;
}
inline ::abb::egm::wrapper::trajectory::RobotPositionGoal* StaticPositionGoal::release_robot() {
  clear_has_robot();
  ::abb::egm::wrapper::trajectory::RobotPositionGoal* temp = robot_;
  robot_ = NULL;
  return temp;
}
inline void StaticPositionGoal::set_allocated_robot(::abb::egm::wrapper::trajectory::RobotPositionGoal* robot) {
  delete robot_;
  robot_ = robot;
  if (robot) {
    set_has_robot();
  } else {
    clear_has_robot();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.StaticPositionGoal.robot)
}

// optional .abb.egm.wrapper.Joints external = 2;
inline bool StaticPositionGoal::has_external() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StaticPositionGoal::set_has_external() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StaticPositionGoal::clear_has_external() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StaticPositionGoal::clear_external() {
  if (external_ != NULL) external_->::abb::egm::wrapper::Joints::Clear();
  clear_has_external();
}
inline const ::abb::egm::wrapper::Joints& StaticPositionGoal::external() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.StaticPositionGoal.external)
  return external_ != NULL ? *external_ : *default_instance_->external_;
}
inline ::abb::egm::wrapper::Joints* StaticPositionGoal::mutable_external() {
  set_has_external();
  if (external_ == NULL) external_ = new ::abb::egm::wrapper::Joints;
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.StaticPositionGoal.external)
  return external_;
}
inline ::abb::egm::wrapper::Joints* StaticPositionGoal::release_external() {
  clear_has_external();
  ::abb::egm::wrapper::Joints* temp = external_;
  external_ = NULL;
  return temp;
}
inline void StaticPositionGoal::set_allocated_external(::abb::egm::wrapper::Joints* external) {
  delete external_;
  external_ = external;
  if (external) {
    set_has_external();
  } else {
    clear_has_external();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.StaticPositionGoal.external)
}

// -------------------------------------------------------------------

// StaticVelocityGoal

// optional .abb.egm.wrapper.trajectory.RobotVelocityGoal robot = 1;
inline bool StaticVelocityGoal::has_robot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StaticVelocityGoal::set_has_robot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StaticVelocityGoal::clear_has_robot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StaticVelocityGoal::clear_robot() {
  if (robot_ != NULL) robot_->::abb::egm::wrapper::trajectory::RobotVelocityGoal::Clear();
  clear_has_robot();
}
inline const ::abb::egm::wrapper::trajectory::RobotVelocityGoal& StaticVelocityGoal::robot() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.StaticVelocityGoal.robot)
  return robot_ != NULL ? *robot_ : *default_instance_->robot_;
}
inline ::abb::egm::wrapper::trajectory::RobotVelocityGoal* StaticVelocityGoal::mutable_robot() {
  set_has_robot();
  if (robot_ == NULL) robot_ = new ::abb::egm::wrapper::trajectory::RobotVelocityGoal;
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.StaticVelocityGoal.robot)
  return robot_;
}
inline ::abb::egm::wrapper::trajectory::RobotVelocityGoal* StaticVelocityGoal::release_robot() {
  clear_has_robot();
  ::abb::egm::wrapper::trajectory::RobotVelocityGoal* temp = robot_;
  robot_ = NULL;
  return temp;
}
inline void StaticVelocityGoal::set_allocated_robot(::abb::egm::wrapper::trajectory::RobotVelocityGoal* robot) {
  delete robot_;
  robot_ = robot;
  if (robot) {
    set_has_robot();
  } else {
    clear_has_robot();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.StaticVelocityGoal.robot)
}

// optional .abb.egm.wrapper.Joints external = 2;
inline bool StaticVelocityGoal::has_external() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StaticVelocityGoal::set_has_external() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StaticVelocityGoal::clear_has_external() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StaticVelocityGoal::clear_external() {
  if (external_ != NULL) external_->::abb::egm::wrapper::Joints::Clear();
  clear_has_external();
}
inline const ::abb::egm::wrapper::Joints& StaticVelocityGoal::external() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.StaticVelocityGoal.external)
  return external_ != NULL ? *external_ : *default_instance_->external_;
}
inline ::abb::egm::wrapper::Joints* StaticVelocityGoal::mutable_external() {
  set_has_external();
  if (external_ == NULL) external_ = new ::abb::egm::wrapper::Joints;
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.StaticVelocityGoal.external)
  return external_;
}
inline ::abb::egm::wrapper::Joints* StaticVelocityGoal::release_external() {
  clear_has_external();
  ::abb::egm::wrapper::Joints* temp = external_;
  external_ = NULL;
  return temp;
}
inline void StaticVelocityGoal::set_allocated_external(::abb::egm::wrapper::Joints* external) {
  delete external_;
  external_ = external;
  if (external) {
    set_has_external();
  } else {
    clear_has_external();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.StaticVelocityGoal.external)
}

// -------------------------------------------------------------------

// ExecutionProgress

// optional .abb.egm.wrapper.trajectory.ExecutionProgress.State state = 1 [default = UNDEFINED];
inline bool ExecutionProgress::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExecutionProgress::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExecutionProgress::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExecutionProgress::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::abb::egm::wrapper::trajectory::ExecutionProgress_State ExecutionProgress::state() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.ExecutionProgress.state)
  return static_cast< ::abb::egm::wrapper::trajectory::ExecutionProgress_State >(state_);
}
inline void ExecutionProgress::set_state(::abb::egm::wrapper::trajectory::ExecutionProgress_State value) {
  assert(::abb::egm::wrapper::trajectory::ExecutionProgress_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.trajectory.ExecutionProgress.state)
}

// optional .abb.egm.wrapper.trajectory.ExecutionProgress.SubState sub_state = 2 [default = NONE];
inline bool ExecutionProgress::has_sub_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExecutionProgress::set_has_sub_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExecutionProgress::clear_has_sub_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExecutionProgress::clear_sub_state() {
  sub_state_ = 0;
  clear_has_sub_state();
}
inline ::abb::egm::wrapper::trajectory::ExecutionProgress_SubState ExecutionProgress::sub_state() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.ExecutionProgress.sub_state)
  return static_cast< ::abb::egm::wrapper::trajectory::ExecutionProgress_SubState >(sub_state_);
}
inline void ExecutionProgress::set_sub_state(::abb::egm::wrapper::trajectory::ExecutionProgress_SubState value) {
  assert(::abb::egm::wrapper::trajectory::ExecutionProgress_SubState_IsValid(value));
  set_has_sub_state();
  sub_state_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.trajectory.ExecutionProgress.sub_state)
}

// optional .abb.egm.wrapper.Input inputs = 3;
inline bool ExecutionProgress::has_inputs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExecutionProgress::set_has_inputs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExecutionProgress::clear_has_inputs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExecutionProgress::clear_inputs() {
  if (inputs_ != NULL) inputs_->::abb::egm::wrapper::Input::Clear();
  clear_has_inputs();
}
inline const ::abb::egm::wrapper::Input& ExecutionProgress::inputs() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.ExecutionProgress.inputs)
  return inputs_ != NULL ? *inputs_ : *default_instance_->inputs_;
}
inline ::abb::egm::wrapper::Input* ExecutionProgress::mutable_inputs() {
  set_has_inputs();
  if (inputs_ == NULL) inputs_ = new ::abb::egm::wrapper::Input;
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.ExecutionProgress.inputs)
  return inputs_;
}
inline ::abb::egm::wrapper::Input* ExecutionProgress::release_inputs() {
  clear_has_inputs();
  ::abb::egm::wrapper::Input* temp = inputs_;
  inputs_ = NULL;
  return temp;
}
inline void ExecutionProgress::set_allocated_inputs(::abb::egm::wrapper::Input* inputs) {
  delete inputs_;
  inputs_ = inputs;
  if (inputs) {
    set_has_inputs();
  } else {
    clear_has_inputs();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.ExecutionProgress.inputs)
}

// optional .abb.egm.wrapper.Output outputs = 4;
inline bool ExecutionProgress::has_outputs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExecutionProgress::set_has_outputs() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExecutionProgress::clear_has_outputs() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExecutionProgress::clear_outputs() {
  if (outputs_ != NULL) outputs_->::abb::egm::wrapper::Output::Clear();
  clear_has_outputs();
}
inline const ::abb::egm::wrapper::Output& ExecutionProgress::outputs() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.ExecutionProgress.outputs)
  return outputs_ != NULL ? *outputs_ : *default_instance_->outputs_;
}
inline ::abb::egm::wrapper::Output* ExecutionProgress::mutable_outputs() {
  set_has_outputs();
  if (outputs_ == NULL) outputs_ = new ::abb::egm::wrapper::Output;
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.ExecutionProgress.outputs)
  return outputs_;
}
inline ::abb::egm::wrapper::Output* ExecutionProgress::release_outputs() {
  clear_has_outputs();
  ::abb::egm::wrapper::Output* temp = outputs_;
  outputs_ = NULL;
  return temp;
}
inline void ExecutionProgress::set_allocated_outputs(::abb::egm::wrapper::Output* outputs) {
  delete outputs_;
  outputs_ = outputs;
  if (outputs) {
    set_has_outputs();
  } else {
    clear_has_outputs();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.ExecutionProgress.outputs)
}

// optional double time_passed = 5;
inline bool ExecutionProgress::has_time_passed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExecutionProgress::set_has_time_passed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExecutionProgress::clear_has_time_passed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExecutionProgress::clear_time_passed() {
  time_passed_ = 0;
  clear_has_time_passed();
}
inline double ExecutionProgress::time_passed() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.ExecutionProgress.time_passed)
  return time_passed_;
}
inline void ExecutionProgress::set_time_passed(double value) {
  set_has_time_passed();
  time_passed_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.trajectory.ExecutionProgress.time_passed)
}

// optional bool goal_active = 6;
inline bool ExecutionProgress::has_goal_active() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExecutionProgress::set_has_goal_active() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ExecutionProgress::clear_has_goal_active() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ExecutionProgress::clear_goal_active() {
  goal_active_ = false;
  clear_has_goal_active();
}
inline bool ExecutionProgress::goal_active() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.ExecutionProgress.goal_active)
  return goal_active_;
}
inline void ExecutionProgress::set_goal_active(bool value) {
  set_has_goal_active();
  goal_active_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.trajectory.ExecutionProgress.goal_active)
}

// optional .abb.egm.wrapper.trajectory.PointGoal goal = 7;
inline bool ExecutionProgress::has_goal() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ExecutionProgress::set_has_goal() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ExecutionProgress::clear_has_goal() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ExecutionProgress::clear_goal() {
  if (goal_ != NULL) goal_->::abb::egm::wrapper::trajectory::PointGoal::Clear();
  clear_has_goal();
}
inline const ::abb::egm::wrapper::trajectory::PointGoal& ExecutionProgress::goal() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.ExecutionProgress.goal)
  return goal_ != NULL ? *goal_ : *default_instance_->goal_;
}
inline ::abb::egm::wrapper::trajectory::PointGoal* ExecutionProgress::mutable_goal() {
  set_has_goal();
  if (goal_ == NULL) goal_ = new ::abb::egm::wrapper::trajectory::PointGoal;
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.ExecutionProgress.goal)
  return goal_;
}
inline ::abb::egm::wrapper::trajectory::PointGoal* ExecutionProgress::release_goal() {
  clear_has_goal();
  ::abb::egm::wrapper::trajectory::PointGoal* temp = goal_;
  goal_ = NULL;
  return temp;
}
inline void ExecutionProgress::set_allocated_goal(::abb::egm::wrapper::trajectory::PointGoal* goal) {
  delete goal_;
  goal_ = goal;
  if (goal) {
    set_has_goal();
  } else {
    clear_has_goal();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.ExecutionProgress.goal)
}

// optional .abb.egm.wrapper.trajectory.TrajectoryGoal active_trajectory = 8;
inline bool ExecutionProgress::has_active_trajectory() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ExecutionProgress::set_has_active_trajectory() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ExecutionProgress::clear_has_active_trajectory() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ExecutionProgress::clear_active_trajectory() {
  if (active_trajectory_ != NULL) active_trajectory_->::abb::egm::wrapper::trajectory::TrajectoryGoal::Clear();
  clear_has_active_trajectory();
}
inline const ::abb::egm::wrapper::trajectory::TrajectoryGoal& ExecutionProgress::active_trajectory() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.ExecutionProgress.active_trajectory)
  return active_trajectory_ != NULL ? *active_trajectory_ : *default_instance_->active_trajectory_;
}
inline ::abb::egm::wrapper::trajectory::TrajectoryGoal* ExecutionProgress::mutable_active_trajectory() {
  set_has_active_trajectory();
  if (active_trajectory_ == NULL) active_trajectory_ = new ::abb::egm::wrapper::trajectory::TrajectoryGoal;
  // @@protoc_insertion_point(field_mutable:abb.egm.wrapper.trajectory.ExecutionProgress.active_trajectory)
  return active_trajectory_;
}
inline ::abb::egm::wrapper::trajectory::TrajectoryGoal* ExecutionProgress::release_active_trajectory() {
  clear_has_active_trajectory();
  ::abb::egm::wrapper::trajectory::TrajectoryGoal* temp = active_trajectory_;
  active_trajectory_ = NULL;
  return temp;
}
inline void ExecutionProgress::set_allocated_active_trajectory(::abb::egm::wrapper::trajectory::TrajectoryGoal* active_trajectory) {
  delete active_trajectory_;
  active_trajectory_ = active_trajectory;
  if (active_trajectory) {
    set_has_active_trajectory();
  } else {
    clear_has_active_trajectory();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.wrapper.trajectory.ExecutionProgress.active_trajectory)
}

// optional uint32 pending_trajectories = 9;
inline bool ExecutionProgress::has_pending_trajectories() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ExecutionProgress::set_has_pending_trajectories() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ExecutionProgress::clear_has_pending_trajectories() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ExecutionProgress::clear_pending_trajectories() {
  pending_trajectories_ = 0u;
  clear_has_pending_trajectories();
}
inline ::google::protobuf::uint32 ExecutionProgress::pending_trajectories() const {
  // @@protoc_insertion_point(field_get:abb.egm.wrapper.trajectory.ExecutionProgress.pending_trajectories)
  return pending_trajectories_;
}
inline void ExecutionProgress::set_pending_trajectories(::google::protobuf::uint32 value) {
  set_has_pending_trajectories();
  pending_trajectories_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.wrapper.trajectory.ExecutionProgress.pending_trajectories)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace trajectory
}  // namespace wrapper
}  // namespace egm
}  // namespace abb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::abb::egm::wrapper::trajectory::ExecutionProgress_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::abb::egm::wrapper::trajectory::ExecutionProgress_State>() {
  return ::abb::egm::wrapper::trajectory::ExecutionProgress_State_descriptor();
}
template <> struct is_proto_enum< ::abb::egm::wrapper::trajectory::ExecutionProgress_SubState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::abb::egm::wrapper::trajectory::ExecutionProgress_SubState>() {
  return ::abb::egm::wrapper::trajectory::ExecutionProgress_SubState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_egm_5fwrapper_5ftrajectory_2eproto__INCLUDED
